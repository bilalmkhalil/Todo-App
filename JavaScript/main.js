

// Interaction of Elements and Dynamicaly generating elements
// // Todo: create li element dynamicaly
// // Todo: create checkbox, p & button element respectively within li element
// // Todo: select del button dynamicaly generated by JS
// // Todo: by clicking on delete button delete the list item
// // Todo: highlight the selected list item even click on checkbox input
// Todo: if click happen outside the list item then highlite from it, will be removed
// // Todo: list item to interact with checkbox if true list item is crossed if not uncrossed
// Todo: store & fetch list items in local storage
// // Todo: if list item is deleted then using id of li delete from object literal 
// Todo: remove list container shadow when it's empty
// Todo: create separate objects for checked and unchecked list
// Todo: ceate a counter of total todo list and also for checked and unchecked
// // Todo: create a dark mode

// General information
// * list item is dynamicaly generated by JavaScript
// * checkbox & delete button is also dyanmicaly generated with-in li element
// * every list item is assign with random ID

// Questions
// // ? what is event delegation & arg 'e' and 'target' syntax do
// // ? what is localStorage and how it works
// // ? how JSON works in JavaScript
// // ? what is DOM and how DOM Node works
// ? what is DOM Manuplation
// ? how objects works

const section = document.querySelectorAll(".section");
const title = document.querySelector("#title");
const textBox = document.querySelector("#text-box");
const addButton = document.querySelector("#add-button");
const unorderList = document.querySelector("#u-list");
const cmpltCounter = document.querySelector("#cmpltCounter");
const uncmpltCounter = document.querySelector("#uncmpltCounter");

const modeContainer = document.querySelector("#mode-container");
const mode = document.querySelector("#mode");
const body = document.querySelector("body");
const input = document.querySelector("#input-form");
const listItems = document.querySelector("#list-container");

let cmpltCounterSize = parseInt(cmpltCounter.innerText);
let uncmpltCounterSize = parseInt(uncmpltCounter.innerText);

let list = {};
// li = new liGen(textBox.value);

// when the page loads it will add shadow class to the sections
section.forEach((el) => { el.classList.add("shadow"); });

modeContainer.addEventListener("click", (e) => {
    if(mode.innerText === "Dark Mode") {
        document.body.classList.add("dark-mode");
        mode.innerText = "Light Mode";
        mode.classList.add("active");
        // when dark mode is activate
        section.forEach((el) => { el.classList.remove("shadow"); });
    } else {
        document.body.classList.remove("dark-mode");
        mode.innerText = "Dark Mode";
        mode.classList.remove("active");
        // when dark mode is deactivate
        section.forEach((el) => { el.classList.add("shadow"); });
    }
})

addButton.addEventListener("click", (e) => {
    
    if (textBox.value) {
        uncmpltCounter.innerText = ++uncmpltCounterSize;
        list[Date.now()] = textBox.value;
        li = new liGen(textBox.value);
        textBox.value = null;
    }
    e.preventDefault();
});

unorderList.addEventListener("click", (e) => {
    
    // if click event happen on dynamic generated delete button
    if ((e.target.nodeName === "INPUT") && (e.target.type === "button")) {
        // removing parent(li) element of button element
        id = id_extractor(e.target.parentNode)
        console.log(`{${id} => ${list[id]}} Deleted!`)
        delete list[id];
        e.target.parentNode.remove();
        
        // console.log(e.target.parentNode.childNodes[0].checked);
        
        if(e.target.parentNode.childNodes[0].checked) {
            cmpltCounter.innerText = --cmpltCounterSize;
        }
        if(!e.target.parentNode.childNodes[0].checked) {
            uncmpltCounter.innerText = --uncmpltCounterSize;
        }
    }
    if ((e.target.nodeName === "INPUT") && (e.target.type === "checkbox")) {
        // fetch text from li element 
        let text = e.target.parentNode.children[1].innerText;

        if (e.target.checked === true) {
            e.target.parentNode.children[1].innerHTML = `<del>${text}</del>`;
            cmpltCounter.innerText = ++cmpltCounterSize;
            uncmpltCounter.innerText = --uncmpltCounterSize;
        }
        if (e.target.checked === false) {
            e.target.parentNode.children[1].innerHTML = `${text}`;
            cmpltCounter.innerText = --cmpltCounterSize;
            uncmpltCounter.innerText = ++uncmpltCounterSize;   
        }
    }
})

function id_extractor(obj) {
    if(obj.nodeName === "LI") {
        var id_val = obj.attributes["list-id"].nodeValue;
    } else {
        var id_val = obj.parentNode.attributes["list-id"].nodeValue;
    }
    return id_val;
}

class liGen {
    constructor(val) {
        const ul = document.querySelector("#u-list");
        
        const li = document.createElement("li");
        const checkbox = document.createElement("input");
        const p = document.createElement("p");
        const button = document.createElement("input");

        li.setAttribute("list-id", Date.now());
        li.setAttribute("draggable", "true");
        checkbox.setAttribute("id", "checkbox");
        checkbox.setAttribute("type", "checkbox");
        p.setAttribute("id", "list-text");
        button.setAttribute("id", "del-btn");
        button.setAttribute("type", "button");
        button.setAttribute("value", "Delete");
        
        p.textContent = val;
        li.appendChild(checkbox);
        li.appendChild(p);
        li.appendChild(button);
        ul.appendChild(li);
    }
}

class DB {
    constructor(obj) {
        this.obj = obj;
    }
    save() {
        let obj_stringfy = JSON.stringify(this.obj);

        if (localStorage.getItem("Todo List") === null) {
            localStorage.setItem("Todo List", obj_stringfy);
        } else {
            var todo_obj = JSON.stringify(this.fetch("Todo List"));
            if (obj_stringfy == todo_obj) {
                localStorage.setItem("Todo List", obj_stringfy);
            } else {
                
            }
            localStorage.clear;
        }
        return todo_obj;
    }
    fetch() {
        let items_str = localStorage.getItem(this.obj);
        let todo_obj = JSON.parse(items_str);
        return todo_obj;
    }
}
