

// Interaction of Elements and Dynamicaly generating elements
// // Todo: create li element dynamicaly
// // Todo: create checkbox, p & button element respectively within li element
// // Todo: select del button dynamicaly generated by JS
// // Todo: by clicking on delete button delete the list item
// // Todo: highlight the selected list item even click on checkbox input
// Todo: if click happen outside the list item then highlite from it, will be removed
// // Todo: list item to interact with checkbox if true list item is crossed if not uncrossed
// Todo: store & fetch list items in local storage
// // Todo: if list item is deleted then using id of li delete from object literal 
// Todo: remove list container shadow when it's empty
// Todo: create separate objects for checked and unchecked list
// Todo: ceate a counter of total todo list and also for checked and unchecked
// // Todo: create a dark mode
// Todo: when and todo is added to list it's should be added to local storage at the same time 

// General information
// * list item is dynamicaly generated by JavaScript
// * checkbox & delete button is also dyanmicaly generated with-in li element
// * every list item is assign with random ID

// Questions
// // ? what is event delegation & arg 'e' and 'target' syntax do
// // ? what is localStorage and how it works
// // ? how JSON works in JavaScript
// // ? what is DOM and how DOM Node works
// ? what is DOM Manuplation
// ? how objects works

// Selectors
const section = document.querySelectorAll(".section");
const title = document.querySelector("#title");
const addButton = document.querySelector("#add-button");
const unorderList = document.querySelector("#u-list");

const modeContainer = document.querySelector("#mode-container");
const mode = document.querySelector("#mode");
const body = document.querySelector("body");
const input = document.querySelector("#input-form");
const listItems = document.querySelector("#list-container");

// Counters
let cmpltCounterSize = parseInt(document.querySelector("#cmpltCounter").innerText);
let uncmpltCounterSize = parseInt(document.querySelector("#uncmpltCounter").innerText);

// when the page loads it will add shadow class to the sections
section.forEach((el) => { el.classList.add("shadow"); });

// list of todo
let todo_list = [];

let toggleDarkMode = () => {
    document.body.classList.toggle("dark-mode");
    mode.innerText = document.body.classList.contains("dark-mode") ? "Light Mode" : "Dark Mode";
    mode.classList.toggle("active");
    section.forEach((el) => { el.classList.toggle("shadow"); });
}

let addTodo = (e) => {
    e.preventDefault();
    
    const textBox = document.querySelector("#text-box");
    value = textBox.value.trim();
    
    if (value) {
        uncmpltCounterSize++;

        let id = Date.now();
        todo_list.push({id: id, text: value, check: false});
        renderTodoItem(id, value);
        
        textBox.value = null;
    }
}

let renderTodoItem = (id, val) => {
    const ul = document.querySelector("#u-list");
        
    const li = document.createElement("li");
    const p = document.createElement("p");
    const checkMark = document.createElement("i");
    const editButton = document.createElement("i");
    const deleteButton = document.createElement("i");

    li.setAttribute("list-id", id);
    li.setAttribute("draggable", "true");
    p.setAttribute("id", "list-text");
    p.innerText = val;
    // p.contentEditable = true;
    checkMark.setAttribute("id", "checkbox"); 
    checkMark.setAttribute("class", "fa-regular fa-circle-check ls-action-btns");
    editButton.setAttribute("class", "fa-solid fa-edit ls-action-btns");
    deleteButton.setAttribute("class", "fa-solid fa-trash ls-action-btns");
    deleteButton.setAttribute("id", "del-btn");

    li.appendChild(checkMark);
    li.appendChild(editButton)
    li.appendChild(deleteButton);
    ul.appendChild(li);

    updateCounters();
}

let handleClick = (e) => {
    const target = e.target;

    if(target.id === "checkbox") {
        toggleCheck(target);
    }
    if(target.id === "edit") {
        editItem(target);
    }
    if(target.id === "del-btn") {
        deleteItem(target);
    }
}

let toggleCheck = (target) => {

    target.classList.toggle("fa-regular");
    target.classList.toggle("fa-solid");

    let text = target.parentNode.children[1].innerText;
    if(target.classList.contains("fa-regular")) {
        target.parentNode.children[1].innerHTML = `${text}`;
    } else {
        target.parentNode.children[1].innerHTML = `<del>${text}</del>`;
    }

    cmpltCounterSize += target.classList.contains("fa-regular") ? -1 : 1;
    uncmpltCounterSize += target.classList.contains("fa-regular") ? 1 : -1;
    updateCounters();
}

let setCursorAtEnd = (element) => {
    let range = document.createRange();
    let selection = window.getSelection();
    range.selectNodeContents(element);
    range.collapse(false); // Collapse the range to the end
    selection.removeAllRanges();
    selection.addRange(range);
};

let editItem = (target) => {
    console.log(target.parentNode.children[1].classList.contains("list-text"));
    target.parentNode.children[2].classList.toggle("fa-edit");
    target.parentNode.children[2].classList.toggle("fa-solid");
    target.parentNode.children[2].classList.toggle("fa-check");
    target.parentNode.children[1].contentEditable = true;
    target.parentNode.children[1].focus();
    setCursorAtEnd(target.parentNode.children[1]);
}

let deleteItem = (target) => {
    let id = target.parentNode.attributes["list-id"].nodeValue;
    delete todo_list.find((todo) => todo.id === id); 
    // console.log(`{${id} => ${todo_list.find((todo) => todo.id === id)}} Deleted!`)
    target.parentNode.remove();

    cmpltCounterSize += target.parentNode.children[0].classList.contains("fa-solid") ? -1 : 0;
    uncmpltCounterSize += target.parentNode.children[0].classList.contains("fa-regular") ? -1 : 0;
    updateCounters();
}

// Event Listeners
modeContainer.addEventListener("click", toggleDarkMode);
addButton.addEventListener("click", addTodo);
listItems.addEventListener("click", handleClick);

let updateCounters = () => {
    document.querySelector("#cmpltCounter").innerText = cmpltCounterSize;
    document.querySelector("#uncmpltCounter").innerText = uncmpltCounterSize;
}

class Todo {
    constructor(obj) {
        this.obj = obj;
    }
    save() {
        let obj_stringfy = JSON.stringify(this.obj);

        if (localStorage.getItem("Todo List") === null) {
            localStorage.setItem("Todo List", obj_stringfy);
        } else {
            var todo_obj = JSON.stringify(this.fetch("Todo List"));
            if (obj_stringfy == todo_obj) {
                localStorage.setItem("Todo List", obj_stringfy);
            } else {
                
            }
            localStorage.clear;
        }
        return todo_obj;
    }
    fetch() {
        let items_str = localStorage.getItem(this.obj);
        let todo_obj = JSON.parse(items_str);
        return todo_obj;
    }
}
